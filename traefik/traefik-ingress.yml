#apiVersion: v1
#kind: Namespace
#metadata:
# name: traefik
#...
#---
#Création d’un ClusterRole
#kind: ClusterRole
#apiVersion: rbac.authorization.k8s.io/v1beta1
#metadata:
# name: traefik-ingress-controller
#rules:
# - apiGroups:
#     - ""
#   resources:
#     - pods
#     - services
#     - endpoints
#     - secrets
#   verbs:
#     - get
#     - list
#     - watch
# - apiGroups:
#     - extensions
#   resources:
#     - ingresses
#   verbs:
#     - get
#     - list
#     - watch
#---
#
### Création d’un [ClusterRoleBinding](https://kubernetes.io/docs/admin/authorization/rbac/#rolebinding-and-clusterrolebinding)
### YML
#kind: ClusterRoleBinding
#apiVersion: rbac.authorization.k8s.io/v1beta1
#metadata:
# name: traefik-ingress-controller
#roleRef:
# apiGroup: rbac.authorization.k8s.io
# kind: ClusterRole
# name: traefik-ingress-controller
#subjects:
#- kind: ServiceAccount
# name: traefik-ingress-controller
# namespace: traefik
#...
#---
#
#Création d’un ServiceAccount
#apiVersion: v1
#kind: ServiceAccount
#metadata:
# name: traefik-ingress-controller
# namespace: traefik
#...
#
#---
#
### Création d’un [ConfigMap](https://kubernetes.io/docs/tasks/configure-pod-container/configmap/)
### YAML
#apiVersion: v1
#kind: ConfigMap
#metadata:
# name: traefik-conf
# namespace: traefik
#data:
# traefik.toml: |-
#   defaultEntryPoints = ["http","https"]
#   [web]
#   address = ":8080"
#...
#
#---
### Création d’un [DaemonSet](https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/)
### YAML
#apiVersion: extensions/v1beta1
#kind: DaemonSet
#metadata:
# name: traefik-ingress-controller
# namespace: traefik
# labels:
#   k8s-app: traefik-ingress-lb
#   kubernetes.io/cluster-service: "true"
#spec:
# template:
#   metadata:
#     labels:
#       k8s-app: traefik-ingress-lb
#       name: traefik-ingress-lb
#   spec:
#     hostNetwork: true # workaround
#     serviceAccountName: traefik-ingress-controller
#     terminationGracePeriodSeconds: 60
#     tolerations:
#     - key: node-role.kubernetes.io/master
#       effect: NoSchedule
#     containers:
#     - image: traefik
#     - image: traefik:v1.3.1
#       name: traefik-ingress-lb
#       imagePullPolicy: Always
#       volumeMounts:
#         - mountPath: "/config"
#           name: "config"
#       resources:
#         requests:
#           cpu: 100m
#           memory: 20Mi
#       args:
#       - --kubernetes
#       - --configfile=/config/traefik.toml
#     volumes:
#     - name: config
#       configMap:
#         name: traefik-conf
#...
#
#---
### Création d’un [Service](https://kubernetes.io/docs/concepts/services-networking/service/)
### YAML
#apiVersion: v1
#kind: Service
#metadata:
# name: traefik-web-ui
# namespace: traefik
#spec:
# selector:
#   k8s-app: traefik-ingress-lb
# ports:
# - port: 80
#   targetPort: 8080
#...
#
#---
#
### Création d’un [IngressController](https://kubernetes.io/docs/concepts/services-networking/ingress/)   
### Pensez à modifier la ligne host pour qu’elle corresponde à votre nom de domaine.
### YAML
#apiVersion: extensions/v1beta1
#kind: Ingress
#metadata:
# name: traefik-web-ui
# namespace: traefik
# annotations:
#   kubernetes.io/ingress.class: traefik
#spec:
# rules:
# - host: "traefik.mon.dom"
#   http:
#     paths:
#     - backend:
#         serviceName: traefik-web-ui
#         servicePort: 80
#...
#
#Si vous allez sur l’adresse que vous avez renseignée dans votre IngressController, vous pouvez maintenant accéder à votre backend Traefik !
## Conclusion

#Vous avez maintenant un beau Traefik qui répondra à l’ensemble de vos requêtes :) Vous n’avez plus qu’à créer de nouveaux IngressController et ainsi accéder à l’ensemble de vos applications via un point d’entrée unique.
